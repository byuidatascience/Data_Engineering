{"paragraphs":[{"text":"%pyspark\n# Make sure psycopg2 is installed:\nimport psycopg2","user":"anonymous","dateUpdated":"2017-04-21T17:32:50+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"/usr/local/lib64/python2.7/site-packages/matplotlib/font_manager.py:273: UserWarning: Matplotlib is building the font cache using fc-list. This may take a moment.\n  warnings.warn('Matplotlib is building the font cache using fc-list. This may take a moment.')\n"}]},"apps":[],"jobName":"paragraph_1492795935077_-531761775","id":"20170407-013059_453085699","dateCreated":"2017-04-21T17:32:15+0000","dateStarted":"2017-04-21T17:32:50+0000","dateFinished":"2017-04-21T17:33:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1955"},{"text":"%pyspark\n# Load data from S3\nraw_tweets = sc.textFile(\"s3a://dsci6007.kinesis.data/2017/03/20/20/*\")","user":"anonymous","dateUpdated":"2017-04-21T19:07:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1492795935073_-530222779","id":"20170407-004016_730184283","dateCreated":"2017-04-21T17:32:15+0000","dateStarted":"2017-04-21T19:07:49+0000","dateFinished":"2017-04-21T19:07:49+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1956"},{"text":"%pyspark\ndef filter_tweets(tweet_str):\n    try:\n        tweet = json.loads(tweet_str)\n        if 'id' in tweet:\n            return True\n        else:  # probably a deletion\n            return False\n    except ValueError:\n        # probably corrupt data\n        return False","user":"anonymous","dateUpdated":"2017-04-21T19:07:51+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1492796363352_1509511741","id":"20170421-173923_1097134295","dateCreated":"2017-04-21T17:39:23+0000","dateStarted":"2017-04-21T19:07:51+0000","dateFinished":"2017-04-21T19:07:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1957"},{"text":"%pyspark\n# Define functions to extract rows from tweet objects\ndef get_tweet(tweet_str):\n    '''\n    INPUT: dict of tweets\n    OUTPUT: list of length 7 w/ the following values:\n            tweet_id\n            text\n            user_id\n            timestamp_ms\n            created_at\n            lang\n            possibly_sensitive\n    '''\n    import time\n    try:\n        tweet = json.loads(tweet_str)\n        tweet_id = tweet['id']\n        text = tweet['text']\n        user_id = tweet.get('user')\n        if user_id:\n            user_id = user_id.get('id')\n        timestamp_ms = tweet.get('timestamp_ms')  # machine readable timestamp\n        created_at = tweet.get('created_at')  # human readable timestamp\n        created_at = time.strftime('%Y-%m-%d %H:%M:%S',\n                        time.strptime(created_at,'%a %b %d %H:%M:%S +0000 %Y'))\n        lang = tweet.get('lang')\n        possibly_sensitive = tweet.get('possibly_sensitive')\n        return [tweet_id, text, user_id, timestamp_ms, created_at, lang,\n                    possibly_sensitive]\n    except ValueError:\n        pass\n\n\ndef get_user(tweet_str):\n    '''\n    INPUT: dict of tweets\n    OUTPUT: list of length 3 w/ the following values:\n            user_id\n            screen_name\n            followers_count\n    '''\n    try:\n        tweet = json.loads(tweet_str)\n        users = tweet.get('user')\n        if users:\n            user_id = users.get('id')\n            screen_name = users.get('screen_name')\n            followers_count = users.get('followers_count')\n        return [user_id, screen_name, followers_count]\n    except ValueError:\n        pass\n\n\ndef get_hashtags(tweet_str):\n    '''\n    INPUT: dict of tweets\n    OUTPUT: generator that yeilds lists w/ the following values:\n        tweet_id\n        hashtag\n    '''\n    try:\n        tweet = json.loads(tweet_str)\n        if 'entities' in tweet:\n            for hashtag in tweet['entities'].get('hashtags', []):\n                yield tweet['id'], hashtag['text']\n    except ValueError:\n        pass\n","user":"anonymous","dateUpdated":"2017-04-21T19:07:53+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1492796116626_-637908143","id":"20170421-173516_440573270","dateCreated":"2017-04-21T17:35:16+0000","dateStarted":"2017-04-21T19:07:53+0000","dateFinished":"2017-04-21T19:07:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1958"},{"text":"%pyspark\nfiltered_tweets = raw_tweets.filter(filter_tweets).cache()\ntweets = filtered_tweets.map(get_tweet)\nusers = filtered_tweets.map(get_user)\nhashtags = filtered_tweets.filter(lambda _: '\"hashtags\": [{' in _).flatMap(get_hashtags)","user":"anonymous","dateUpdated":"2017-04-21T19:08:59+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1492795935078_-530607528","id":"20170407-004141_2062867171","dateCreated":"2017-04-21T17:32:15+0000","dateStarted":"2017-04-21T19:08:59+0000","dateFinished":"2017-04-21T19:08:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1959"},{"text":"%pyspark\nfrom functools import partial\ndef insert_rows(tablename, cols, rows):\n    row_count = 0\n    err_count = 0\n    if rows:\n        import psycopg2\n        from psycopg2 import IntegrityError\n        conn = psycopg2.connect(**{'dbname': 'dsci6007',\n                                 'host': 'rds-lab.xxxxxxxxxxx.us-east-1.rds.amazonaws.com',\n                                 'password': 'xxxxxxxxxxx',\n                                 'user': 'xxxxxxxxxxx'})\n        cur = conn.cursor()\n        for row in rows:\n            try:\n                row_count += 1\n                insert_str = \"INSERT INTO {} VALUES \".format(tablename)\n                insert_str += \"(\" + \",\".join([\"%s\"] * cols) + \")\"\n                cur.execute(insert_str, row)\n                conn.commit()\n            except IntegrityError:\n                err_count += 1\n        conn.close()\n        \ninsert_tweets = partial(insert_rows, [\"tweets\", 7])\ninsert_users = partial(insert_rows, [\"users\", 3])\ninsert_hashtags = partial(insert_rows, [\"hashtags\", 2])","user":"anonymous","dateUpdated":"2017-04-21T19:09:02+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1492796809415_-412617143","id":"20170421-174649_270001282","dateCreated":"2017-04-21T17:46:49+0000","dateStarted":"2017-04-21T19:09:02+0000","dateFinished":"2017-04-21T19:09:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1960"},{"text":"%pyspark\ntweets.distinct().foreachPartition(insert_tweets)","user":"anonymous","dateUpdated":"2017-04-21T19:09:48+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1492797079233_-137366269","id":"20170421-175119_1984204044","dateCreated":"2017-04-21T17:51:19+0000","dateStarted":"2017-04-21T19:09:48+0000","dateFinished":"2017-04-21T18:18:32+0000","status":"RUNNING","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1961"},{"text":"%pyspark\nhashtags.distinct().foreachPartition(insert_hashtags)","user":"anonymous","dateUpdated":"2017-04-21T18:00:26+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1492795935079_-530992277","id":"20170407-004352_1898252565","dateCreated":"2017-04-21T17:32:15+0000","dateStarted":"2017-04-21T18:00:26+0000","dateFinished":"2017-04-21T18:18:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1962"},{"text":"%pyspark\n","dateUpdated":"2017-04-21T17:32:15+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1492795935080_-532916021","id":"20170407-004219_1197942124","dateCreated":"2017-04-21T17:32:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1963"}],"name":"psycopg2","id":"2CDJC2H3T","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}